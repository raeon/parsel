
Building closure for state	State("root", ". expr nil")
|  Closure: Adding versions
|  |  Adding child:	State("expr-unary", ". unary nil")
|  |  Adding child:	State("expr-binary", ". binary nil")
|  |  Adding child:	State("expr-value", ". value nil")
|  Building closure for state	State("expr-unary", ". unary nil")
|  |  |  Adding child:	State("unary", ". unary-op expr nil")
|  |  Building closure for state	State("unary", ". unary-op expr nil")
|  |  |  Closure: Adding versions
|  |  |  |  Adding child:	State("unary-op-bang", ". bang nil")
|  |  |  |  Adding child:	State("unary-op-minus", ". minus nil")
|  |  |  Building closure for state	State("unary-op-bang", ". bang nil")
|  |  |  Building closure for state	State("unary-op-bang", "bang . nil")
|  |  |  Building closure for state	State("unary-op-minus", ". minus nil")
|  |  |  Building closure for state	State("unary-op-minus", "minus . nil")
|  |  Building closure for state	State("unary", "unary-op . expr nil")
|  |  |  Closure: Adding versions
|  |  |  |  Adding child:	State("expr-unary", ". unary nil")
|  |  |  |  Adding child:	State("expr-binary", ". binary nil")
|  |  |  |  Adding child:	State("expr-value", ". value nil")
|  |  |  ALREADY VISITED:	State("expr-unary", ". unary nil")
|  |  |  Building closure for state	State("expr-unary", "unary . nil")
|  |  |  Building closure for state	State("expr-binary", ". binary nil")
|  |  |  |  Closure: Adding versions
|  |  |  |  |  Adding child:	State("binary-expr", ". expr nil")
|  |  |  |  |  Adding child:	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  Adding child:	State("binary-expr", ". expr nil")
|  |  |  |  Building closure for state	State("binary-expr", ". expr nil")
|  |  |  |  |  Closure: Adding versions
|  |  |  |  |  |  Adding child:	State("expr-unary", ". unary nil")
|  |  |  |  |  |  Adding child:	State("expr-binary", ". binary nil")
|  |  |  |  |  |  Adding child:	State("expr-value", ". value nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-unary", ". unary nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-unary", "unary . nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-binary", ". binary nil")
|  |  |  |  |  Building closure for state	State("expr-binary", "binary . nil")
|  |  |  |  |  Building closure for state	State("expr-value", ". value nil")
|  |  |  |  |  Building closure for state	State("expr-value", "value . nil")
|  |  |  |  Building closure for state	State("binary-expr", "expr . nil")
|  |  |  |  Building closure for state	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  Closure: Adding versions
|  |  |  |  |  |  Adding child:	State("binary-op-plus", ". plus nil")
|  |  |  |  |  |  Adding child:	State("binary-op-minus", ". minus nil")
|  |  |  |  |  Building closure for state	State("binary-op-plus", ". plus nil")
|  |  |  |  |  Building closure for state	State("binary-op-plus", "plus . nil")
|  |  |  |  |  Building closure for state	State("binary-op-minus", ". minus nil")
|  |  |  |  |  Building closure for state	State("binary-op-minus", "minus . nil")
|  |  |  |  Building closure for state	State("binary-binary-op", "binary-op . nil")
|  |  |  |  Building closure for state	State("binary-expr", ". expr nil")
|  |  |  |  |  Closure: Adding versions
|  |  |  |  |  |  Adding child:	State("expr-unary", ". unary nil")
|  |  |  |  |  |  Adding child:	State("expr-binary", ". binary nil")
|  |  |  |  |  |  Adding child:	State("expr-value", ". value nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-unary", ". unary nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-unary", "unary . nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-binary", ". binary nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-binary", "binary . nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-value", ". value nil")
|  |  |  |  |  ALREADY VISITED:	State("expr-value", "value . nil")
|  |  |  |  Building closure for state	State("binary-expr", "expr . nil")
|  |  |  ALREADY VISITED:	State("expr-binary", "binary . nil")
|  |  |  ALREADY VISITED:	State("expr-value", ". value nil")
|  |  |  ALREADY VISITED:	State("expr-value", "value . nil")
|  |  Building closure for state	State("unary", "unary-op expr . nil")
|  ALREADY VISITED:	State("expr-unary", "unary . nil")
|  ALREADY VISITED:	State("expr-binary", ". binary nil")
|  ALREADY VISITED:	State("expr-binary", "binary . nil")
|  ALREADY VISITED:	State("expr-value", ". value nil")
|  ALREADY VISITED:	State("expr-value", "value . nil")
Building closure for state	State("root", "expr . nil")

Building tables for State("root", ". expr nil")
State("root", ". expr nil")
|  minus => shift State("unary-op-minus", "minus . nil")
|  Building tables for State("binary-op-plus", ". plus nil")
|  State("binary-op-plus", ". plus nil")
|  |  plus => shift State("binary-op-plus", "plus . nil")
|  Building tables for State("binary-op-plus", "plus . nil")
|  State("binary-op-plus", "plus . nil")
|  |  any => reduce binary-op-plus
|  Building tables for State("binary-op-minus", ". minus nil")
|  State("binary-op-minus", ". minus nil")
|  |  minus => shift State("binary-op-minus", "minus . nil")
|  Building tables for State("binary-op-minus", "minus . nil")
|  State("binary-op-minus", "minus . nil")
|  |  any => reduce binary-op-minus
|  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  Building tables for State("unary-op-bang", ". bang nil")
|  State("unary-op-bang", ". bang nil")
|  |  bang => shift State("unary-op-bang", "bang . nil")
|  Building tables for State("unary-op-bang", "bang . nil")
|  State("unary-op-bang", "bang . nil")
|  |  any => reduce unary-op-bang
|  Building tables for State("unary-op-minus", ". minus nil")
|  State("unary-op-minus", ". minus nil")
|  |  minus => shift State("unary-op-minus", "minus . nil")
|  Building tables for State("unary-op-minus", "minus . nil")
|  State("unary-op-minus", "minus . nil")
|  |  any => reduce unary-op-minus
|  unary-op => goto State("unary", "unary-op . expr nil")
|  value => shift State("expr-value", "value . nil")
|  minus => shift State("binary-op-minus", "minus . nil")
|  Building tables for State("unary", ". unary-op expr nil")
|  State("unary", ". unary-op expr nil")
|  |  bang => shift State("unary-op-bang", "bang . nil")
|  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  unary-op => goto State("unary", "unary-op . expr nil")
|  Building tables for State("unary", "unary-op . expr nil")
|  State("unary", "unary-op . expr nil")
|  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  Building tables for State("binary-op-plus", ". plus nil")
|  |  Building tables for State("binary-op-plus", "plus . nil")
|  |  Building tables for State("binary-op-minus", ". minus nil")
|  |  Building tables for State("binary-op-minus", "minus . nil")
|  |  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  unary-op => goto State("unary", "unary-op . expr nil")
|  |  value => shift State("expr-value", "value . nil")
|  |  minus => shift State("binary-op-minus", "minus . nil")
|  |  Building tables for State("unary", ". unary-op expr nil")
|  |  Building tables for State("unary", "unary-op . expr nil")
|  |  Building tables for State("unary", "unary-op expr . nil")
|  |  State("unary", "unary-op expr . nil")
|  |  |  any => reduce unary
|  |  unary => goto State("expr-unary", "unary . nil")
|  |  Building tables for State("expr-unary", ". unary nil")
|  |  State("expr-unary", ". unary nil")
|  |  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  |  unary-op => goto State("unary", "unary-op . expr nil")
|  |  |  bang => shift State("unary-op-bang", "bang . nil")
|  |  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  |  Building tables for State("unary", ". unary-op expr nil")
|  |  |  Building tables for State("unary", "unary-op . expr nil")
|  |  |  Building tables for State("unary", "unary-op expr . nil")
|  |  |  unary => goto State("expr-unary", "unary . nil")
|  |  Building tables for State("expr-unary", "unary . nil")
|  |  State("expr-unary", "unary . nil")
|  |  |  any => reduce expr-unary
|  |  Building tables for State("expr-binary", ". binary nil")
|  |  State("expr-binary", ". binary nil")
|  |  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  |  Building tables for State("binary-op-plus", ". plus nil")
|  |  |  Building tables for State("binary-op-plus", "plus . nil")
|  |  |  Building tables for State("binary-op-minus", ". minus nil")
|  |  |  Building tables for State("binary-op-minus", "minus . nil")
|  |  |  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  |  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  |  unary-op => goto State("unary", "unary-op . expr nil")
|  |  |  plus => shift State("binary-op-plus", "plus . nil")
|  |  |  Building tables for State("unary", ". unary-op expr nil")
|  |  |  Building tables for State("unary", "unary-op . expr nil")
|  |  |  Building tables for State("unary", "unary-op expr . nil")
|  |  |  unary => goto State("expr-unary", "unary . nil")
|  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  State("expr-binary", "binary . nil")
|  |  |  |  any => reduce expr-binary
|  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  State("expr-value", ". value nil")
|  |  |  |  value => shift State("expr-value", "value . nil")
|  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  State("expr-value", "value . nil")
|  |  |  |  any => reduce expr-value
|  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  minus => shift State("binary-op-minus", "minus . nil")
|  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  value => shift State("expr-value", "value . nil")
|  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  State("binary-expr", ". expr nil")
|  |  |  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  |  |  Building tables for State("binary-op-plus", ". plus nil")
|  |  |  |  Building tables for State("binary-op-plus", "plus . nil")
|  |  |  |  Building tables for State("binary-op-minus", ". minus nil")
|  |  |  |  Building tables for State("binary-op-minus", "minus . nil")
|  |  |  |  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  |  |  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  |  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  |  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  |  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  |  |  unary-op => goto State("unary", "unary-op . expr nil")
|  |  |  |  value => shift State("expr-value", "value . nil")
|  |  |  |  Building tables for State("unary", ". unary-op expr nil")
|  |  |  |  Building tables for State("unary", "unary-op . expr nil")
|  |  |  |  Building tables for State("unary", "unary-op expr . nil")
|  |  |  |  unary => goto State("expr-unary", "unary . nil")
|  |  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  |  minus => shift State("binary-op-minus", "minus . nil")
|  |  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  |  plus => shift State("binary-op-plus", "plus . nil")
|  |  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  |  State("binary-expr", "expr . nil")
|  |  |  |  |  any => reduce binary-expr
|  |  |  |  Building tables for State("binary-binary-op", ". binary-op nil")
|  |  |  |  State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  Building tables for State("binary-op-plus", ". plus nil")
|  |  |  |  |  Building tables for State("binary-op-plus", "plus . nil")
|  |  |  |  |  Building tables for State("binary-op-minus", ". minus nil")
|  |  |  |  |  Building tables for State("binary-op-minus", "minus . nil")
|  |  |  |  |  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  plus => shift State("binary-op-plus", "plus . nil")
|  |  |  |  |  minus => shift State("binary-op-minus", "minus . nil")
|  |  |  |  Building tables for State("binary-binary-op", "binary-op . nil")
|  |  |  |  State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  any => reduce binary-binary-op
|  |  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  |  State("binary-expr", ". expr nil")
|  |  |  |  |  minus => shift State("unary-op-minus", "minus . nil")
|  |  |  |  |  Building tables for State("binary-op-plus", ". plus nil")
|  |  |  |  |  Building tables for State("binary-op-plus", "plus . nil")
|  |  |  |  |  Building tables for State("binary-op-minus", ". minus nil")
|  |  |  |  |  Building tables for State("binary-op-minus", "minus . nil")
|  |  |  |  |  binary-op => goto State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  Building tables for State("unary-op-bang", ". bang nil")
|  |  |  |  |  Building tables for State("unary-op-bang", "bang . nil")
|  |  |  |  |  Building tables for State("unary-op-minus", ". minus nil")
|  |  |  |  |  Building tables for State("unary-op-minus", "minus . nil")
|  |  |  |  |  unary-op => goto State("unary", "unary-op . expr nil")
|  |  |  |  |  minus => shift State("binary-op-minus", "minus . nil")
|  |  |  |  |  Building tables for State("unary", ". unary-op expr nil")
|  |  |  |  |  Building tables for State("unary", "unary-op . expr nil")
|  |  |  |  |  Building tables for State("unary", "unary-op expr . nil")
|  |  |  |  |  unary => goto State("expr-unary", "unary . nil")
|  |  |  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  |  |  plus => shift State("binary-op-plus", "plus . nil")
|  |  |  |  |  Building tables for State("expr-unary", ". unary nil")
|  |  |  |  |  Building tables for State("expr-unary", "unary . nil")
|  |  |  |  |  Building tables for State("expr-binary", ". binary nil")
|  |  |  |  |  Building tables for State("expr-binary", "binary . nil")
|  |  |  |  |  Building tables for State("expr-value", ". value nil")
|  |  |  |  |  Building tables for State("expr-value", "value . nil")
|  |  |  |  |  expr => goto State("binary-expr", "expr . nil")
|  |  |  |  |  value => shift State("expr-value", "value . nil")
|  |  |  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  |  |  Building tables for State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  Building tables for State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  |  |  State("binary-expr", "expr . nil")
|  |  |  |  |  |  any => reduce binary-expr
|  |  |  |  |  binary => goto State("expr-binary", "binary . nil")
|  |  |  |  |  bang => shift State("unary-op-bang", "bang . nil")
|  |  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  |  binary => goto State("expr-binary", "binary . nil")
|  |  |  |  bang => shift State("unary-op-bang", "bang . nil")
|  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  Building tables for State("binary-binary-op", ". binary-op nil")
|  |  |  Building tables for State("binary-binary-op", "binary-op . nil")
|  |  |  Building tables for State("binary-expr", ". expr nil")
|  |  |  Building tables for State("binary-expr", "expr . nil")
|  |  |  binary => goto State("expr-binary", "binary . nil")
|  |  |  bang => shift State("unary-op-bang", "bang . nil")
|  |  Building tables for State("expr-binary", "binary . nil")
|  |  Building tables for State("expr-value", ". value nil")
|  |  Building tables for State("expr-value", "value . nil")
|  |  expr => goto State("binary-expr", "expr . nil")
|  |  plus => shift State("binary-op-plus", "plus . nil")
|  |  Building tables for State("expr-unary", ". unary nil")
|  |  Building tables for State("expr-unary", "unary . nil")
|  |  Building tables for State("expr-binary", ". binary nil")
|  |  Building tables for State("expr-binary", "binary . nil")
|  |  Building tables for State("expr-value", ". value nil")
|  |  Building tables for State("expr-value", "value . nil")
|  |  expr => goto State("binary-expr", "expr . nil")
|  |  Building tables for State("expr-unary", ". unary nil")
|  |  Building tables for State("expr-unary", "unary . nil")
|  |  Building tables for State("expr-binary", ". binary nil")
|  |  Building tables for State("expr-binary", "binary . nil")
|  |  Building tables for State("expr-value", ". value nil")
|  |  Building tables for State("expr-value", "value . nil")
|  |  expr => goto State("unary", "unary-op expr . nil")
|  |  Building tables for State("binary-expr", ". expr nil")
|  |  Building tables for State("binary-expr", "expr . nil")
|  |  Building tables for State("binary-binary-op", ". binary-op nil")
|  |  Building tables for State("binary-binary-op", "binary-op . nil")
|  |  Building tables for State("binary-expr", ". expr nil")
|  |  Building tables for State("binary-expr", "expr . nil")
|  |  binary => goto State("expr-binary", "binary . nil")
|  |  bang => shift State("unary-op-bang", "bang . nil")
|  Building tables for State("unary", "unary-op expr . nil")
|  unary => goto State("expr-unary", "unary . nil")
|  Building tables for State("expr-unary", ". unary nil")
|  Building tables for State("expr-unary", "unary . nil")
|  Building tables for State("expr-binary", ". binary nil")
|  Building tables for State("expr-binary", "binary . nil")
|  Building tables for State("expr-value", ". value nil")
|  Building tables for State("expr-value", "value . nil")
|  expr => goto State("binary-expr", "expr . nil")
|  plus => shift State("binary-op-plus", "plus . nil")
|  Building tables for State("expr-unary", ". unary nil")
|  Building tables for State("expr-unary", "unary . nil")
|  Building tables for State("expr-binary", ". binary nil")
|  Building tables for State("expr-binary", "binary . nil")
|  Building tables for State("expr-value", ". value nil")
|  Building tables for State("expr-value", "value . nil")
|  expr => goto State("binary-expr", "expr . nil")
|  Building tables for State("expr-unary", ". unary nil")
|  Building tables for State("expr-unary", "unary . nil")
|  Building tables for State("expr-binary", ". binary nil")
|  Building tables for State("expr-binary", "binary . nil")
|  Building tables for State("expr-value", ". value nil")
|  Building tables for State("expr-value", "value . nil")
|  expr => goto State("root", "expr . nil")
|  Building tables for State("binary-expr", ". expr nil")
|  Building tables for State("binary-expr", "expr . nil")
|  Building tables for State("binary-binary-op", ". binary-op nil")
|  Building tables for State("binary-binary-op", "binary-op . nil")
|  Building tables for State("binary-expr", ". expr nil")
|  Building tables for State("binary-expr", "expr . nil")
|  binary => goto State("expr-binary", "binary . nil")
|  bang => shift State("unary-op-bang", "bang . nil")
Building tables for State("root", "expr . nil")
State("root", "expr . nil")
|  any => reduce root

Merging tables
symbol	value	 followers:
|  State("expr-value", "value . nil")
symbol	minus	 followers:
|  State("binary-op-minus", "minus . nil")
|  State("unary-op-minus", "minus . nil")
symbol	expr	 followers:
|  State("unary", "unary-op expr . nil")
|  State("binary-expr", "expr . nil")
|  State("binary-expr", "expr . nil")
|  State("root", "expr . nil")
symbol	binary-op	 followers:
|  State("binary-binary-op", "binary-op . nil")
symbol	binary	 followers:
|  State("expr-binary", "binary . nil")
symbol	unary	 followers:
|  State("expr-unary", "unary . nil")
symbol	unary-op	 followers:
|  State("unary", "unary-op . expr nil")
symbol	plus	 followers:
|  State("binary-op-plus", "plus . nil")
symbol	bang	 followers:
|  State("unary-op-bang", "bang . nil")

object: root
|  state: State("root", ". expr nil")
|  |  closure: Closure(12, 
|  |  	State("unary-op-minus", ". minus nil")
|  |  	State("binary-binary-op", ". binary-op nil")
|  |  	State("unary", ". unary-op expr nil")
|  |  	State("expr-value", ". value nil")
|  |  	State("binary-op-minus", ". minus nil")
|  |  	State("expr-unary", ". unary nil")
|  |  	State("binary-expr", ". expr nil")
|  |  	State("binary-op-plus", ". plus nil")
|  |  	State("binary-expr", ". expr nil")
|  |  	State("root", ". expr nil")
|  |  	State("expr-binary", ". binary nil")
|  |  	State("unary-op-bang", ". bang nil"))
|  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  object: binary-op-plus
|  |  |  |  state: State("binary-op-plus", ". plus nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("binary-op-plus", ". plus nil"))
|  |  |  |  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  |  state: State("binary-op-plus", "plus . nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("binary-op-plus", "plus . nil"))
|  |  |  |  |  any	 => reduce 	binary-op-plus
|  |  value	 => shift 	State("expr-value", "value . nil")
|  |  |  object: expr-value
|  |  |  |  state: State("expr-value", ". value nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("expr-value", ". value nil"))
|  |  |  |  |  value	 => shift 	State("expr-value", "value . nil")
|  |  |  |  state: State("expr-value", "value . nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("expr-value", "value . nil"))
|  |  |  |  |  any	 => reduce 	expr-value
|  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  object: unary-op-bang
|  |  |  |  state: State("unary-op-bang", ". bang nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("unary-op-bang", ". bang nil"))
|  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  state: State("unary-op-bang", "bang . nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("unary-op-bang", "bang . nil"))
|  |  |  |  |  any	 => reduce 	unary-op-bang
|  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  object: binary-op-minus
|  |  |  |  state: State("binary-op-minus", ". minus nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("binary-op-minus", ". minus nil"))
|  |  |  |  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  |  state: State("binary-op-minus", "minus . nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("binary-op-minus", "minus . nil"))
|  |  |  |  |  any	 => reduce 	unary-op-minus
|  |  |  |  |  |  object: unary-op-minus
|  |  |  |  |  |  |  state: State("unary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  	State("unary-op-minus", ". minus nil"))
|  |  |  |  |  |  |  |  minus	 => shift 	State("unary-op-minus", "minus . nil")
|  |  |  |  |  |  |  state: State("unary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  	State("unary-op-minus", "minus . nil"))
|  |  |  |  |  |  |  |  any	 => reduce 	unary-op-minus
|  |  binary-binary-op	 => goto 	State("expr-binary", "binary . nil")
|  |  |  object: expr-binary
|  |  |  |  state: State("expr-binary", ". binary nil")
|  |  |  |  |  closure: Closure(11, 
|  |  |  |  |  	State("unary-op-minus", ". minus nil")
|  |  |  |  |  	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  	State("unary", ". unary-op expr nil")
|  |  |  |  |  	State("binary-op-plus", ". plus nil")
|  |  |  |  |  	State("expr-unary", ". unary nil")
|  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  	State("binary-op-minus", ". minus nil")
|  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  	State("expr-value", ". value nil")
|  |  |  |  |  	State("expr-binary", ". binary nil")
|  |  |  |  |  	State("unary-op-bang", ". bang nil"))
|  |  |  |  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  |  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  |  value	 => shift 	State("expr-value", "value . nil")
|  |  |  |  |  binary-binary-op	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  object: unary
|  |  |  |  |  |  |  state: State("unary", ". unary-op expr nil")
|  |  |  |  |  |  |  |  closure: Closure(3, 
|  |  |  |  |  |  |  |  	State("unary-op-bang", ". bang nil")
|  |  |  |  |  |  |  |  	State("unary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  	State("unary", ". unary-op expr nil"))
|  |  |  |  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  |  |  |  |  minus	 => shift 	State("unary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  state: State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  closure: Closure(12, 
|  |  |  |  |  |  |  |  	State("unary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  |  |  |  	State("unary", ". unary-op expr nil")
|  |  |  |  |  |  |  |  	State("expr-value", ". value nil")
|  |  |  |  |  |  |  |  	State("binary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  	State("expr-unary", ". unary nil")
|  |  |  |  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  |  |  |  	State("binary-op-plus", ". plus nil")
|  |  |  |  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  |  |  |  	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  	State("expr-binary", ". binary nil")
|  |  |  |  |  |  |  |  	State("unary-op-bang", ". bang nil"))
|  |  |  |  |  |  |  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  |  |  |  |  |  value	 => shift 	State("expr-value", "value . nil")
|  |  |  |  |  |  |  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  |  |  |  |  binary-binary-op	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  binary-op-minus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  |  object: binary-binary-op
|  |  |  |  |  |  |  |  |  |  state: State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  |  |  |  |  |  |  closure: Closure(3, 
|  |  |  |  |  |  |  |  |  |  |  	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  |  |  |  |  |  |  	State("binary-op-plus", ". plus nil")
|  |  |  |  |  |  |  |  |  |  |  	State("binary-op-minus", ". minus nil"))
|  |  |  |  |  |  |  |  |  |  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  |  |  |  |  |  |  |  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  |  |  |  binary-op-plus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  |  |  |  binary-op-minus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  |  |  state: State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  |  |  |  	State("binary-binary-op", "binary-op . nil"))
|  |  |  |  |  |  |  |  |  |  |  any	 => reduce 	binary-binary-op
|  |  |  |  |  |  |  |  expr-unary	 => goto 	State("unary", "unary-op expr . nil")
|  |  |  |  |  |  |  |  binary-op-plus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  |  expr-binary	 => goto 	State("unary", "unary-op expr . nil")
|  |  |  |  |  |  |  |  unary	 => goto 	State("expr-unary", "unary . nil")
|  |  |  |  |  |  |  |  |  object: expr-unary
|  |  |  |  |  |  |  |  |  |  state: State("expr-unary", ". unary nil")
|  |  |  |  |  |  |  |  |  |  |  closure: Closure(4, 
|  |  |  |  |  |  |  |  |  |  |  	State("unary", ". unary-op expr nil")
|  |  |  |  |  |  |  |  |  |  |  	State("unary-op-bang", ". bang nil")
|  |  |  |  |  |  |  |  |  |  |  	State("unary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  |  |  |  	State("expr-unary", ". unary nil"))
|  |  |  |  |  |  |  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  |  |  |  |  |  |  |  minus	 => shift 	State("unary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  |  |  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  |  |  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  |  |  |  unary	 => goto 	State("expr-unary", "unary . nil")
|  |  |  |  |  |  |  |  |  |  state: State("expr-unary", "unary . nil")
|  |  |  |  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  |  |  |  	State("expr-unary", "unary . nil"))
|  |  |  |  |  |  |  |  |  |  |  any	 => reduce 	expr-unary
|  |  |  |  |  |  |  |  expr-value	 => goto 	State("unary", "unary-op expr . nil")
|  |  |  |  |  |  |  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  state: State("unary", "unary-op expr . nil")
|  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  	State("unary", "unary-op expr . nil"))
|  |  |  |  |  |  |  |  any	 => reduce 	root
|  |  |  |  |  binary-op-minus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  expr-unary	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  |  |  object: binary-expr
|  |  |  |  |  |  |  state: State("binary-expr", ". expr nil")
|  |  |  |  |  |  |  |  closure: Closure(11, 
|  |  |  |  |  |  |  |  	State("unary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  	State("binary-binary-op", ". binary-op nil")
|  |  |  |  |  |  |  |  	State("unary", ". unary-op expr nil")
|  |  |  |  |  |  |  |  	State("binary-op-minus", ". minus nil")
|  |  |  |  |  |  |  |  	State("expr-unary", ". unary nil")
|  |  |  |  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  |  |  |  	State("binary-op-plus", ". plus nil")
|  |  |  |  |  |  |  |  	State("binary-expr", ". expr nil")
|  |  |  |  |  |  |  |  	State("expr-value", ". value nil")
|  |  |  |  |  |  |  |  	State("expr-binary", ". binary nil")
|  |  |  |  |  |  |  |  	State("unary-op-bang", ". bang nil"))
|  |  |  |  |  |  |  |  plus	 => shift 	State("binary-op-plus", "plus . nil")
|  |  |  |  |  |  |  |  minus	 => shift 	State("binary-op-minus", "minus . nil")
|  |  |  |  |  |  |  |  bang	 => shift 	State("unary-op-bang", "bang . nil")
|  |  |  |  |  |  |  |  value	 => shift 	State("expr-value", "value . nil")
|  |  |  |  |  |  |  |  binary-binary-op	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  binary-op-minus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  expr-unary	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  |  |  |  |  binary-op-plus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  |  expr-binary	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  |  |  |  |  unary	 => goto 	State("expr-unary", "unary . nil")
|  |  |  |  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  |  |  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  |  |  |  expr-value	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  |  |  |  state: State("binary-expr", "expr . nil")
|  |  |  |  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  |  |  |  	State("binary-expr", "expr . nil"))
|  |  |  |  |  |  |  |  any	 => reduce 	root
|  |  |  |  |  binary-op-plus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  expr-binary	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  |  unary	 => goto 	State("expr-unary", "unary . nil")
|  |  |  |  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  |  |  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  |  |  |  expr-value	 => goto 	State("binary-expr", "expr . nil")
|  |  |  |  state: State("expr-binary", "binary . nil")
|  |  |  |  |  closure: Closure(1, 
|  |  |  |  |  	State("expr-binary", "binary . nil"))
|  |  |  |  |  any	 => reduce 	expr-binary
|  |  unary-op-bang	 => goto 	State("unary", "unary-op . expr nil")
|  |  binary-op-minus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  expr-unary	 => goto 	State("root", "expr . nil")
|  |  binary-op-plus	 => goto 	State("binary-binary-op", "binary-op . nil")
|  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  expr-binary	 => goto 	State("root", "expr . nil")
|  |  unary	 => goto 	State("expr-unary", "unary . nil")
|  |  binary-expr	 => goto 	State("expr-binary", "binary . nil")
|  |  unary-op-minus	 => goto 	State("unary", "unary-op . expr nil")
|  |  expr-value	 => goto 	State("root", "expr . nil")
|  state: State("root", "expr . nil")
|  |  closure: Closure(1, 
|  |  	State("root", "expr . nil"))
|  |  any	 => reduce 	root





Current state:	State("root", ". expr nil")
Current closure:	Closure(12, 
	State("unary-op-minus", ". minus nil")
	State("binary-binary-op", ". binary-op nil")
	State("unary", ". unary-op expr nil")
	State("expr-value", ". value nil")
	State("binary-op-minus", ". minus nil")
	State("expr-unary", ". unary nil")
	State("binary-expr", ". expr nil")
	State("binary-op-plus", ". plus nil")
	State("binary-expr", ". expr nil")
	State("root", ". expr nil")
	State("expr-binary", ". binary nil")
	State("unary-op-bang", ". bang nil"))
	Lookaheads: 
		plus => shift State("binary-op-plus", "plus . nil")
		value => shift State("expr-value", "value . nil")
		bang => shift State("unary-op-bang", "bang . nil")
		minus => shift State("binary-op-minus", "minus . nil")
	Gotos: 
		binary-binary-op => State("expr-binary", "binary . nil")
		unary-op-bang => State("unary", "unary-op . expr nil")
		binary-op-minus => State("binary-binary-op", "binary-op . nil")
		expr-unary => State("root", "expr . nil")
		binary-op-plus => State("binary-binary-op", "binary-op . nil")
		binary-expr => State("expr-binary", "binary . nil")
		expr-binary => State("root", "expr . nil")
		unary => State("expr-unary", "unary . nil")
		binary-expr => State("expr-binary", "binary . nil")
		unary-op-minus => State("unary", "unary-op . expr nil")
		expr-value => State("root", "expr . nil")
Shifting token:	Token(value, "x", 1)
Next token:
New state:	State("expr-value", "value . nil")
	Lookaheads: 
		any => reduce expr-value
	Gotos: 
Next shift:
Next reduce:	expr-value


Current state:	State("expr-value", "value . nil")
Current closure:	Closure(1, 
	State("expr-value", "value . nil"))
	Lookaheads: 
		any => reduce expr-value
	Gotos: 
Reducing by:	expr-value
Consuming	1	symbol(s)
Reduced:	Node(expr-value, Token(value, "x", 1))
Lookup state:	State("root", ". expr nil")
	Gotos: 
		binary-binary-op => State("expr-binary", "binary . nil")
		unary-op-bang => State("unary", "unary-op . expr nil")
		binary-op-minus => State("binary-binary-op", "binary-op . nil")
		expr-unary => State("root", "expr . nil")
		binary-op-plus => State("binary-binary-op", "binary-op . nil")
		binary-expr => State("expr-binary", "binary . nil")
		expr-binary => State("root", "expr . nil")
		unary => State("expr-unary", "unary . nil")
		binary-expr => State("expr-binary", "binary . nil")
		unary-op-minus => State("unary", "unary-op . expr nil")
		expr-value => State("root", "expr . nil")
Actual key:	expr-value


Current state:	State("root", "expr . nil")
Current closure:	Closure(1, 
	State("root", "expr . nil"))
	Lookaheads: 
		any => reduce root
	Gotos: 
Reducing by:	expr-value
Consuming	1	symbol(s)
Reduced:	Node(root, Node(expr-value, Token(value, "x", 1)))
Lookup state:	State("root", ". expr nil")
	Gotos: 
		binary-binary-op => State("expr-binary", "binary . nil")
		unary-op-bang => State("unary", "unary-op . expr nil")
		binary-op-minus => State("binary-binary-op", "binary-op . nil")
		expr-unary => State("root", "expr . nil")
		binary-op-plus => State("binary-binary-op", "binary-op . nil")
		binary-expr => State("expr-binary", "binary . nil")
		expr-binary => State("root", "expr . nil")
		unary => State("expr-unary", "unary . nil")
		binary-expr => State("expr-binary", "binary . nil")
		unary-op-minus => State("unary", "unary-op . expr nil")
		expr-value => State("root", "expr . nil")
Actual key:	root
Result:	Node(root, Node(expr-value, Token(value, "x", 1)))
